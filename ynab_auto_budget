#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ynab_auto_budget

Uses a budget template and the You Need a Budget (YNAB) API to suggest monthy
budget amounts. The YNAB currently does not support writing monthly budget
amounts, so that must be done manually.
"""

import sys
import os
import argparse
import json
import datetime

import requests
import yaml

API_PREFIX = 'https://api.youneedabudget.com/v1'

class YNABAutoBudgetError(Exception):
    """ Used for exceptions specific to this script """

    pass


class YNABAutoBudget:
    def __init__(self, credentials_filename):
        self.__setup_ynab(credentials_filename)
        self.__get_ynab_budget_id('My Budget')
        self.__get_ynab_budget_categories()
        self.__remove_hidden_categories()
        self.__remove_unused_category_groups()

    def __setup_ynab(self, credentials_filename):
        """ Get the user's credentials """

        self.headers = dict()

        try:
            with open(os.path.expanduser(credentials_filename)) as cfile:
                credentials = json.load(cfile)

            self.headers['Authorization'] = credentials['prefix'] + ' ' + credentials['key']
        except IOError as err:
            raise YNABAutoBudgetError('Unable to open credentials file:\n{}'\
                                    .format(err))
        except json.JSONDecodeError:
            raise YNABAutoBudgetError('Unable to parse credentials file {}'\
                                    .format(credentials_filename))
        except KeyError as err:
            raise YNABAutoBudgetError('Expected key {} not found in credentials '\
                                    'file {}'.format(err, credentials_filename))


    def __api_get(self, url):
        """ Get request from the YNAB API """

        try:
            return requests.get(API_PREFIX + url, headers=self.headers).json()
        except requests.exceptions.RequestException as err:
            raise YNABAutoBudgetError('YNAB API error:\n{}'.format(err))


    def __get_ynab_budget_id(self, name):
        """ Get the API id for the named budget """

        budget_summary = self.__api_get('/budgets')

        # Find the named budget and retur the ID
        for budget in budget_summary['data']['budgets']:
            if budget['name'] == name:
                self.budget_id = budget['id']
                return

        # If we get here, the budget wasn't found
        raise YNABAutoBudgetError("Budget '{}' not found".format(name))


    def __get_ynab_budget_categories(self):
        """ Get the catagory names from the budget """

        categories_response = self.__api_get('/budgets/{}/categories'.format(self.budget_id))

        self.category_groups = categories_response['data']['category_groups']


    def __remove_hidden_categories(self):
        for group in self.category_groups:
            group['categories'] = list(filter(lambda x: not x['hidden'], group['categories']))


    @staticmethod
    def __valid_category_group(group):
        #return group.categories and group.name != 'Internal Master Category'
        return len(group['categories'])


    def __remove_unused_category_groups(self):
        self.category_groups = list(filter(YNABAutoBudget.__valid_category_group, self.category_groups))


    def __get_amount_to_be_budgeted(self):
        """ Retrieve this month's "To Be Budgeted" amount from YNAB """

        summaries = self.__api_get('/budgets/{}/months'.format(self.budget_id))

        now = datetime.date.today()

        for summary in summaries.data.months:
            if now.year == summary['month']['year'] and now.month == summary['month']['month']:
                return summary['to_be_budgeted'] / 1000.0
        
        raise YNABAutoBudgetError('Could not find "To Be Budgeted" amount')

    def create_empty_template(self, filename):
        """ Create an empty template file """

        if os.path.exists(filename):
            raise YNABAutoBudgetError('{} already exists, will not overwrite'.format(filename))

        template = {'remainder': None, 'categories': []}

        for group in self.category_groups:
            for category in group.categories:
                if not category.hidden:
                    template['categories'].append({'category': category.name,
                                                'type': 'fixed',
                                                'value': 0})

        try:
            with open(filename,'w') as tfile:
                yaml.dump(template, stream=tfile, default_flow_style=False)
        except IOError as err:
            raise YNABAutoBudgetError(err)


    def show_current_values(self):
        for group in self.category_groups:
            #print(group)
            print(group['name'])

            for category in group['categories']:
                print('  {}: Budgeted {:.2f} Activity {:.2f} Balance {:.2f}'\
                    .format(category['name'],
                            category['budgeted'] / 1000.0,
                            category['activity'] / 1000.0,
                            category['balance'] / 1000.0))
        
        #print(groups)


    @staticmethod
    def __get_template(filename):
        try:
            with open(filename) as tfile:
                template = yaml.load(tfile)
        except IOError as err:
            raise YNABAutoBudgetError('Error opening template file: {}'.format(err))
        except yaml.YAMLError as err:
            raise YNABAutoBudgetError('Error in template file format: {}'.format(err))

        # Can't do much without a 'categories' section
        if 'categories' not in template:
            raise YNABAutoBudgetError('Template file is missing categories section')

        return template


    @staticmethod
    def __get_template_entry_info(entry, total_budget):
        try:
            name = entry['category']
            value_type = entry['type']

            if value_type == 'fixed':
                value = entry['value']
            elif entry['type'] == 'percent':
                value = (float(entry['value']) * total_budget) / 100.0
            else:
                raise YNABAutoBudgetError('Unrecognized template entry type: {}'.format(entry['type']))
        except KeyError as err: 
            raise YNABAutoBudgetError('Missing key in template file: {}'.format(err))

        return name, value


    def set_budget_amounts(self, filename, total_budget=None, verbose=False, send_to_ynab=False):
        template = YNABAutoBudget.__get_template(filename)

        if not total_budget:
            total_budget = self.__get_amount_to_be_budgeted()
            if verbose:
                print('To Be Budgeted: {}'.format(total_budget))

        remaining = int(total_budget)

        for entry in template['categories']:
            name, value = YNABAutoBudget.__get_template_entry_info(entry, total_budget)

            if verbose:
                print('{}: {:.2f}'.format(name, value))

            remaining -= value

        if remaining < 0.0:
            print('WARNING: Template is over budget by {:.2f}'.format(-remaining))
        else:
            print('Your template meets budget with {:.2f} remianing'.format(remaining))


def main(arguments):
    """ Get YNAB budget, template, and display results """

    try:

        auto_budget = YNABAutoBudget(arguments.credentials)

        if args.create:
            auto_budget.create_empty_template(arguments.template)
        elif args.show:
            auto_budget.show_current_values()
        elif args.check:
            # Just check template against user specified value
            auto_budget.set_budget_amounts(arguments.template, 
                                           total_budget=args.check,
                                           verbose=args.verbose)
        else:
            # Calculate the budget amounts using the "To Be Budgeted" value
            # from YNAB and (optionally) set them in YNAB
            auto_budget.set_budget_amounts(arguments.template,
                                           verbose=args.verbose)

    except YNABAutoBudgetError as err:
        print(err)
        return 1

    return 0

if __name__ == '__main__':
    # Parse arguments with argparse
    formatter_class = argparse.ArgumentDefaultsHelpFormatter

    parser = argparse.ArgumentParser(description=__doc__,
                                     formatter_class=formatter_class)

    parser.add_argument('template',
                        help='Budget template file',
                        type=str)

    parser.add_argument('-c', '--credentials',
                        help='YNAB credentials file',
                        default='~/.ynab/ynab_credentials.json',
                        type=str)

    parser.add_argument('--verbose',
                        help='Show more output',
                        action='store_true')

    group = parser.add_mutually_exclusive_group()

    group.add_argument('--create',
                        help='Create empty template',
                        action='store_true')

    group.add_argument('-s', '--show',
                        help='Show current budgeted values',
                        action='store_true')

    group.add_argument('--check',
                        help='Check budget template against estimated income amount',
                        type=float)

    args = parser.parse_args(sys.argv[1:])

    # Call main() with parsed args
    sys.exit(main(args))
